// if (undefined ==false) console.log ('ложь')
//  else console.log('true')

//  const isComing = confirm('Please confirm hotel reservation');
//  console.log(isComing);
//  confirm() — выводит модальное окно с сообщением, и 2 кнопки, Ok и Cancel.
// При нажатии на Ok, на место вызова функции возвращается true,
// при нажатии на Cancel возвращается false.

// const hotelName = prompt('Please enter desired hotel name:');
// console.log(hotelName);
// prompt() — выводит модальное окно с полем ввода и кнопками Ok и Cancel. 
// При Ok возвращает то, что было введено в поле ввода, при Cancel возвращает null.
// Всегда вернется "строка".

// Примеры ложных значений в JavaScript
// (которые приводятся к ложному в булевых контекстах и, таким образом, обходят блок if)
// if (false)
// if (null)
// if (undefined)
// if (0)
// if (0n)
// if (NaN)
// if ('')
// if ("")
// if (``)
// if (document.all)
//Если первый объект ложный, он возвращает этот объект;

// Выражение-expression
// Инструкция -statement;

// literal - (2) переменная 
// a = b * 2;

// length - свойство строки, которое содержит кол-во символов строки;

// Метод - какая-то активная операция (toUpperCase(), который сделает все буквы заглавными)

// Строгий режим — новая возможность в спецификации ECMAScript 5, 
// которая позволяет переводить скрипт в режим полного соответствия современному стандарту.
//  Это предотвращает определенные ошибки, такие как использование небезопасных конструкций.
//  'use strict';

// Строка начинается и заканчивается одиночной ', или двойными кавычками "

// Boolean именна переменных задают вопрос
// const isAuthenticated = true;
// const canMerge = false;
// const hasChildren = true;
// const isModalOpen = false;

// typeof  возвращает на место своего вызова тип значения переменной указанного после него
// const c = 5;
// console.log(typeof c); // "number"

// Number(val) явно переобразовывает в число
// Number.parseInt() -  Парсит из строки целое число 12
// Number.parseFloat() - Парсит из строки дробное число 12.46


// "Это Not A Number?"
// const validNumber = Number('51'); // 51
// console.log(Number.isNaN(validNumber)); // false

// const invalidNumber = Number('qweqwe'); // NaN
// console.log(Number.isNaN(invalidNumber)); // true

// Объект Math

//''+ '' Конкатенация строк - сложение строк =  Шаблонные строки и интерполяция ${}

// length - свойство, хранит длину строки
// toLowerCase() и toUpperCase() - вернут новую строку в соответствующем регистре, не изменяют оригинальную строку
// indexOf() - вернет позицию (индекс) на которой находится первое совпадение подстроки или -1, если ничего не найдено
// includes() - один из наиболее часто используемых методов, в большинстве случаев заменяет indexOf, проверяет входит ли подстрока в строку, возвращает true или false

//и ( требуется чтобы все операнды были истинными)
// const num = 20;
// const result = num > 10 && num < 30;
// console.log(result); // true

//или (хотябы один из операндов был приведен к true.)
// const num = 40;
// const result = num < 10 || num > 30;
// console.log(result); // true

// if (conitions условия){statement}

// Тернарный оператор {условие} ? {выражение если условие правдиво} : {выражение если условие не правдиво}

// switch - один вопрос и много ответов. break

// Итерация в программировании — организация обработки данных, при которой действия повторяются многократно


// while  do...while
// В отличие от цикла while, цикл do...while 
// всегда выполняет statement как минимум один раз, прежде чем он оценит expression.

// do {
//     // statement
//   } while (expression);

// let password = '';
// do {
//   password = prompt('Введите пароль длиннее 4-х символов', '');
// } while (password.length < 5);
// console.log('Ввели пароль: ', password);


// Цикл for
// Переменные-счетчики, по традиции, называются буквами i/j/k.

//==============================================================================
// for (initialization; condition; post-expression) {
//    // statements
//  }

// var arr = [3, 4, 5, 6]; 
// for (let value of arr){ 
//   console.log(value); //3,4,5,6
// } 

// Целью оператора for-in является перечисление свойств объекта.
// ИНТЕРАЦИЯ - одно выполнение тела цикла по-научному называется.
// for in вообще то используется для итреций по св-вам обьектов, для итераций по массивам
// есть более быстрый вариант for, а опасность как раз в том что он итерирует не только по 
// собственным св-вам обьекта но и по не собственным - которые лежат в прототипе,
// что в большинстве случаев не то что нужно. Это решается добавлением в цикл 
// проверки hasOwnProperty или создать обьект без прототипа Object.create(null).
// ПРОТОТИП - это механизм, с помощью которого объекты JavaScript наследуют свойства друг от друга

// var arr = [3, 4, 5, 6]; 
// for (let i in arr){ 
//   console.log(i); //0,1,2,3
//} 
//================================================================================
//slice() - Метод извлекает часть строки и возвращает новую строку без изменения оригинальной строки.